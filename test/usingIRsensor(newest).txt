//========================================Including the libraries
// #define DEFAULT_SD_FS SD_MMC
// #define CARD_TYPE_SD_MMC 1



#include "esp_camera.h"        //--> Camera ESP
#include "Arduino.h"
#include "FS.h"                //--> SD Card ESP32
#include "SD_MMC.h"            //--> SD Card ESP32
#include "SPI.h"
#include "soc/soc.h"           //--> Disable brownout problems
#include "soc/rtc_cntl_reg.h"  //--> Disable brownout problems
#include "driver/rtc_io.h"
//#include <EEPROM.h>            //--> read and write from flash memory
#include "WiFi.h"
#include <Firebase_ESP_Client.h>
//Provide the token generation process info.
#include <addons/TokenHelper.h>

//Replace with your network credentials
const char* ssid = "CEMARA-AP";
const char* password = "RTYUIOP999";

// Insert Firebase project API Key
#define API_KEY "AIzaSyDtLZOtHS-s2iyWZmjnxB4WMHqEOcHCayo"

// Insert Authorized Email and Corresponding Password
#define USER_EMAIL "smartdoor@gmail.com"
#define USER_PASSWORD "smartdoor"

// Insert Firebase storage bucket ID e.g bucket-name.appspot.com
#define STORAGE_BUCKET_ID "smart-door-esp32-cam.appspot.com"

//Define Firebase Data objects
FirebaseData fbdo;
FirebaseAuth auth;
FirebaseConfig configF;
//========================================

//========================================define the number of bytes you want to access
//#define EEPROM_SIZE 1
//========================================

//========================================Pin definition for CAMERA_MODEL_AI_THINKER
#define PWDN_GPIO_NUM     32
#define RESET_GPIO_NUM    -1
#define XCLK_GPIO_NUM      0
#define SIOD_GPIO_NUM     26
#define SIOC_GPIO_NUM     27

#define Y9_GPIO_NUM       35
#define Y8_GPIO_NUM       34
#define Y7_GPIO_NUM       39
#define Y6_GPIO_NUM       36
#define Y5_GPIO_NUM       21
#define Y4_GPIO_NUM       19
#define Y3_GPIO_NUM       18
#define Y2_GPIO_NUM        5
#define VSYNC_GPIO_NUM    25
#define HREF_GPIO_NUM     23
#define PCLK_GPIO_NUM     22
//========================================

//int pictureNumber = 0; //--> Variable to hold photo naming sequence data from EEPROM.
String path;

void WiFiandFirebase(){
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.println("Connecting to WiFi...");
  }
  // Assign the api key
  configF.api_key = API_KEY;
  //Assign the user sign in credentials
  auth.user.email = USER_EMAIL;
  auth.user.password = USER_PASSWORD;
  //Assign the callback function for the long running token generation task
  configF.token_status_callback = tokenStatusCallback; //see addons/TokenHelper.h
  Firebase.begin(&configF, &auth);
  Firebase.reconnectWiFi(true);
}

void initCameraConfig(){
  camera_config_t config;
  config.ledc_channel = LEDC_CHANNEL_0;
  config.ledc_timer = LEDC_TIMER_0;
  config.pin_d0 = Y2_GPIO_NUM;
  config.pin_d1 = Y3_GPIO_NUM;
  config.pin_d2 = Y4_GPIO_NUM;
  config.pin_d3 = Y5_GPIO_NUM;
  config.pin_d4 = Y6_GPIO_NUM;
  config.pin_d5 = Y7_GPIO_NUM;
  config.pin_d6 = Y8_GPIO_NUM;
  config.pin_d7 = Y9_GPIO_NUM;
  config.pin_xclk = XCLK_GPIO_NUM;
  config.pin_pclk = PCLK_GPIO_NUM;
  config.pin_vsync = VSYNC_GPIO_NUM;
  config.pin_href = HREF_GPIO_NUM;
  config.pin_sscb_sda = SIOD_GPIO_NUM;
  config.pin_sscb_scl = SIOC_GPIO_NUM;
  config.pin_pwdn = PWDN_GPIO_NUM;
  config.pin_reset = RESET_GPIO_NUM;
  config.xclk_freq_hz = 20000000;
  config.pixel_format = PIXFORMAT_JPEG; 
  
  if(psramFound()){
    config.frame_size = FRAMESIZE_UXGA; // FRAMESIZE_ + QVGA|CIF|VGA|SVGA|XGA|SXGA|UXGA
   
    config.jpeg_quality = 10;
    config.fb_count = 2;
  } else {
    config.frame_size = FRAMESIZE_SVGA;
    config.jpeg_quality = 12;
    config.fb_count = 1;
  }
  esp_err_t err = esp_camera_init(&config);
  if (err != ESP_OK) {
    Serial.printf("Camera init failed with error 0x%x", err);
    return;
  }
}

void initSDCard(){
  Serial.println("Starting SD Card");
  delay(250);
  
  //******4-bit mode
//  Serial.println("Start accessing SD Card 4-bit mode");
//  if(!SD_MMC.begin()){
//    Serial.println("SD Card Mount Failed");
//    return;
//  }
//  Serial.println("Started accessing SD Card 4-bit mode successfully");
  //******

  
  //******1-bit mode
  pinMode(13, INPUT_PULLUP); //--> This is done to resolve an "error" in 1-bit mode when SD_MMC.begin("/sdcard", true). 
  
  Serial.println("Start accessing SD Card 1-bit mode");
  if(!SD_MMC.begin("/sdcard", true)){
    Serial.println("SD Card Mount Failed");
    return;
  }
  Serial.println("Started accessing SD Card 1-bit mode successfully");

  pinMode(13, INPUT_PULLDOWN);
  //******

  //----------------------------------------Checking SD card type
  uint8_t cardType = SD_MMC.cardType();
  if(cardType == CARD_NONE){
    Serial.println("No SD Card attached");
    return;
  }
}

void TakePictureSaveImagesSDCard(){
  camera_fb_t * fb = NULL;
  fb = esp_camera_fb_get();  
  if(!fb) {
    Serial.println("Camera capture failed");
    return;
  }

  digitalWrite(4, LOW); //--> Turn off the LED Flash because the process of taking pictures and saving images to the SD card is complete.
  delay(1000);
  // //----------------------------------------initialize EEPROM with predefined size
  // EEPROM.begin(EEPROM_SIZE);
  // delay(50);
  // pictureNumber = EEPROM.read(0) + 1;
  // delay(50);

  String path = "/picture.jpg"; //--> Path where new picture will be saved in SD Card
  fs::FS &fs = SD_MMC;
  Serial.printf("Picture file name: %s\n", path.c_str());
  File file = fs.open(path.c_str(), FILE_WRITE);
  if(!file){
    Serial.println("Failed to open file in writing mode");
  } 
  else {
    file.write(fb->buf, fb->len); // payload (image), payload length
    Serial.printf("Saved file to path: %s\n", path.c_str());
    // EEPROM.write(0, pictureNumber);
    // EEPROM.commit();
  }
  // Serial.println("Before close");
  file.close();
  // Serial.println("After close");
  esp_camera_fb_return(fb); //--> return the frame buffer back to the driver for reuse.
  // Serial.println("After esp_camera_fb_return");
}

//________________________________________________________________________________void setup()
void setup() {
  WRITE_PERI_REG(RTC_CNTL_BROWN_OUT_REG, 0); //--> disable brownout detector
 
  Serial.begin(115200);
  //Serial.setDebugOutput(true);
  //Serial.println();

  //----------------------------------------Init WiFi Connection and Firebase
  WiFiandFirebase();
  //----------------------------------------

  //----------------------------------------Camera configuration
  initCameraConfig();
  //----------------------------------------

  //----------------------------------------Start accessing and checking SD card
  initSDCard();
  //----------------------------------------

  //----------------------------------------Turning on the LED Flash on the ESP32 Cam Board
  pinMode(4, OUTPUT); // The line of code to turn on the LED Flash is placed here, because the next line of code is the process of taking photos or pictures by the ESP32 Cam.
  digitalWrite(4, HIGH);
  delay(1000);
  //----------------------------------------

  //----------------------------------------Take Picture with Camera
  TakePictureSaveImagesSDCard();
  //----------------------------------------
}

void loop(){
  if(Firebase.ready()){
    Serial.print("Uploading picture... ");
    Serial.println("After Uploading");

    //MIME type should be valid to avoid the download problem.
    //The file systems for flash and SD/SDMMC can be changed in FirebaseFS.h.
    if(Firebase.Storage.upload(&fbdo, STORAGE_BUCKET_ID /* Firebase Storage bucket id */, path /* path to local file */, mem_storage_type_sd /* memory storage type, mem_storage_type_flash and mem_storage_type_sd */, path /* path of remote file stored in the bucket */, "image/jpeg" /* mime type */)){
      Serial.printf("\nDownload URL: %s\n", fbdo.downloadURL().c_str());
      //----------------------------------------
      //----------------------------------------Go to "Sleep" mode.
      // The LED Flash will flash 2 times to indicate that it is in "Sleep" mode.
      Serial.println("Going to sleep now");
      // for(int i = 1; i <= 4; i++) {
      //   digitalWrite(4, !digitalRead(4));
      //   delay(250);
      // }
    
      esp_sleep_enable_ext0_wakeup(GPIO_NUM_12, 1);
      delay(500);
      //******
      
      esp_deep_sleep_start();
      Serial.println("This will never be printed");
      //----------------------------------------
      }

    else{
      Serial.println(fbdo.errorReason());
    }
  }
}